name: Sync Obsidian → Notion (hierarchy)

on:
  push:
    paths:
      - "Flow/**.md"       # Flowフォルダ内のMarkdownファイル
      - "Archive/**.md"    # Archiveフォルダ内のMarkdownファイル
      - "Stock/**.md"      # Stockフォルダ内のMarkdownファイル
  workflow_dispatch:       # 手動実行も可能に

jobs:
  sync-to-notion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      
      # 必要な依存関係をインストール
      - name: Install dependencies
        run: npm install @notionhq/client @vrerv/md-to-notion
      
      # Flow フォルダの同期
      - name: Create Flow parent page if not exists
        id: create_flow_page
        run: |
          # スクリプトでFlowページを確認・作成
          FLOW_PAGE_ID=$(node -e '
            const { Client } = require("@notionhq/client");
            
            async function main() {
              const notion = new Client({ auth: process.env.NOTION_TOKEN });
              
              const response = await notion.search({
                query: "Flow",
                filter: {
                  property: "object",
                  value: "page"
                }
              });
              
              const flowPage = response.results.find(page => 
                page.parent?.page_id === process.env.PARENT_PAGE_ID && 
                page.properties?.title?.title?.[0]?.plain_text === "Flow"
              );
              
              if (flowPage) {
                console.log(flowPage.id);
              } else {
                const newPage = await notion.pages.create({
                  parent: {
                    page_id: process.env.PARENT_PAGE_ID
                  },
                  properties: {
                    title: {
                      title: [
                        {
                          text: {
                            content: "Flow"
                          }
                        }
                      ]
                    }
                  }
                });
                console.log(newPage.id);
              }
            }
            
            main().catch(error => {
              console.error(error);
              process.exit(1);
            });
          ')
          echo "FLOW_PAGE_ID=${FLOW_PAGE_ID}" >> $GITHUB_ENV
          echo "flow_page_id=${FLOW_PAGE_ID}" >> $GITHUB_OUTPUT
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          PARENT_PAGE_ID: ${{ secrets.PARENT_PAGE_ID }}

      - name: Sync Flow folder to Notion
        run: |
          npx @vrerv/md-to-notion \
            --token "$NOTION_TOKEN" \
            --page-id "$FLOW_PAGE_ID" \
            --delete \
            --verbose \
            "Flow"
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          FLOW_PAGE_ID: ${{ steps.create_flow_page.outputs.flow_page_id }}
      
      # Stock フォルダの同期（同様の処理）
      - name: Create Stock parent page if not exists
        id: create_stock_page
        run: |
          STOCK_PAGE_ID=$(node -e '
            const { Client } = require("@notionhq/client");
            
            async function main() {
              const notion = new Client({ auth: process.env.NOTION_TOKEN });
              
              const response = await notion.search({
                query: "Stock",
                filter: {
                  property: "object",
                  value: "page"
                }
              });
              
              const stockPage = response.results.find(page => 
                page.parent?.page_id === process.env.PARENT_PAGE_ID && 
                page.properties?.title?.title?.[0]?.plain_text === "Stock"
              );
              
              if (stockPage) {
                console.log(stockPage.id);
              } else {
                const newPage = await notion.pages.create({
                  parent: {
                    page_id: process.env.PARENT_PAGE_ID
                  },
                  properties: {
                    title: {
                      title: [
                        {
                          text: {
                            content: "Stock"
                          }
                        }
                      ]
                    }
                  }
                });
                console.log(newPage.id);
              }
            }
            
            main().catch(error => {
              console.error(error);
              process.exit(1);
            });
          ')
          echo "STOCK_PAGE_ID=${STOCK_PAGE_ID}" >> $GITHUB_ENV
          echo "stock_page_id=${STOCK_PAGE_ID}" >> $GITHUB_OUTPUT
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          PARENT_PAGE_ID: ${{ secrets.PARENT_PAGE_ID }}

      - name: Sync Stock folder to Notion
        run: |
          npx @vrerv/md-to-notion \
            --token "$NOTION_TOKEN" \
            --page-id "$STOCK_PAGE_ID" \
            --delete \
            --verbose \
            "Stock"
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          STOCK_PAGE_ID: ${{ steps.create_stock_page.outputs.stock_page_id }}
      
      # Archive フォルダも同様に同期
      - name: Create Archive parent page if not exists
        id: create_archive_page
        run: |
          ARCHIVE_PAGE_ID=$(node -e '
            const { Client } = require("@notionhq/client");
            
            async function main() {
              const notion = new Client({ auth: process.env.NOTION_TOKEN });
              
              const response = await notion.search({
                query: "Archive",
                filter: {
                  property: "object",
                  value: "page"
                }
              });
              
              const archivePage = response.results.find(page => 
                page.parent?.page_id === process.env.PARENT_PAGE_ID && 
                page.properties?.title?.title?.[0]?.plain_text === "Archive"
              );
              
              if (archivePage) {
                console.log(archivePage.id);
              } else {
                const newPage = await notion.pages.create({
                  parent: {
                    page_id: process.env.PARENT_PAGE_ID
                  },
                  properties: {
                    title: {
                      title: [
                        {
                          text: {
                            content: "Archive"
                          }
                        }
                      ]
                    }
                  }
                });
                console.log(newPage.id);
              }
            }
            
            main().catch(error => {
              console.error(error);
              process.exit(1);
            });
          ')
          echo "ARCHIVE_PAGE_ID=${ARCHIVE_PAGE_ID}" >> $GITHUB_ENV
          echo "archive_page_id=${ARCHIVE_PAGE_ID}" >> $GITHUB_OUTPUT
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          PARENT_PAGE_ID: ${{ secrets.PARENT_PAGE_ID }}

      - name: Sync Archive folder to Notion
        run: |
          npx @vrerv/md-to-notion \
            --token "$NOTION_TOKEN" \
            --page-id "$ARCHIVE_PAGE_ID" \
            --delete \
            --verbose \
            "Archive"
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          ARCHIVE_PAGE_ID: ${{ steps.create_archive_page.outputs.archive_page_id }}