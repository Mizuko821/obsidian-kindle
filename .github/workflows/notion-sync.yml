name: Sync Obsidian â†’ Notion (hierarchy)

on:
  push:
    paths:
      - "Flow/**/*.md"
      - "Stock/**/*.md"
      - "Archive/**/*.md"
  workflow_dispatch:

jobs:
  sync-to-notion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install @notionhq/client @vrerv/md-to-notion

      - name: Create Flow parent page if not exists
        id: create_flow_page
        run: |
          EXISTING_PAGE_ID=$(node <<'EOF'
          const { Client } = require("@notionhq/client");
          const notion = new Client({ auth: process.env.NOTION_TOKEN });

          (async () => {
            const children = await notion.blocks.children.list({
              block_id: process.env.PARENT_PAGE_ID,
              page_size: 100
            });
            const pageBlock = children.results.find(b =>
              b.type === "child_page" &&
              b.child_page.title === "Flow"
            );
            console.log(pageBlock?.child_page.id || "");
          })();
EOF
          )
          if [ -z "$EXISTING_PAGE_ID" ]; then
            PAGE_ID=$(node <<'EOF'
            const { Client } = require("@notionhq/client");
            const notion = new Client({ auth: process.env.NOTION_TOKEN });

            (async () => {
              const newPage = await notion.pages.create({
                parent: { page_id: process.env.PARENT_PAGE_ID },
                properties: {
                  title: {
                    title: [{ text: { content: "Flow" } }]
                  }
                }
              });
              console.log(newPage.id);
            })();
EOF
            )
          else
            PAGE_ID=$EXISTING_PAGE_ID
          fi
          echo "FLOW_PAGE_ID=$PAGE_ID" >> $GITHUB_ENV
          echo "flow_page_id=$PAGE_ID" >> $GITHUB_OUTPUT
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          PARENT_PAGE_ID: ${{ secrets.PARENT_PAGE_ID }}

      - name: Sync Flow folder to Notion
        run: |
          npx @vrerv/md-to-notion \
            --token "$NOTION_TOKEN" \
            --page-id "$FLOW_PAGE_ID" \
            --delete \
            --verbose \
            "Flow"
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          FLOW_PAGE_ID: ${{ steps.create_flow_page.outputs.flow_page_id }}

      - name: Create Stock parent page if not exists
        id: create_stock_page
        run: |
          EXISTING_PAGE_ID=$(node <<'EOF'
          const { Client } = require("@notionhq/client");
          const notion = new Client({ auth: process.env.NOTION_TOKEN });

          (async () => {
            const children = await notion.blocks.children.list({
              block_id: process.env.PARENT_PAGE_ID,
              page_size: 100
            });
            const pageBlock = children.results.find(b =>
              b.type === "child_page" &&
              b.child_page.title === "Stock"
            );
            console.log(pageBlock?.child_page.id || "");
          })();
EOF
          )
          if [ -z "$EXISTING_PAGE_ID" ]; then
            PAGE_ID=$(node <<'EOF'
            const { Client } = require("@notionhq/client");
            const notion = new Client({ auth: process.env.NOTION_TOKEN });

            (async () => {
              const newPage = await notion.pages.create({
                parent: { page_id: process.env.PARENT_PAGE_ID },
                properties: {
                  title: {
                    title: [{ text: { content: "Stock" } }]
                  }
                }
              });
              console.log(newPage.id);
            })();
EOF
            )
          else
            PAGE_ID=$EXISTING_PAGE_ID
          fi
          echo "STOCK_PAGE_ID=$PAGE_ID" >> $GITHUB_ENV
          echo "stock_page_id=$PAGE_ID" >> $GITHUB_OUTPUT
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          PARENT_PAGE_ID: ${{ secrets.PARENT_PAGE_ID }}

      - name: Sync Stock folder to Notion
        run: |
          npx @vrerv/md-to-notion \
            --token "$NOTION_TOKEN" \
            --page-id "$STOCK_PAGE_ID" \
            --delete \
            --verbose \
            "Stock"
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          STOCK_PAGE_ID: ${{ steps.create_stock_page.outputs.stock_page_id }}

      - name: Create Archive parent page if not exists
        id: create_archive_page
        run: |
          EXISTING_PAGE_ID=$(node <<'EOF'
          const { Client } = require("@notionhq/client");
          const notion = new Client({ auth: process.env.NOTION_TOKEN });

          (async () => {
            const children = await notion.blocks.children.list({
              block_id: process.env.PARENT_PAGE_ID,
              page_size: 100
            });
            const pageBlock = children.results.find(b =>
              b.type === "child_page" &&
              b.child_page.title === "Archive"
            );
            console.log(pageBlock?.child_page.id || "");
          })();
EOF
          )
          if [ -z "$EXISTING_PAGE_ID" ]; then
            PAGE_ID=$(node <<'EOF'
            const { Client } = require("@notionhq/client");
            const notion = new Client({ auth: process.env.NOTION_TOKEN });

            (async () => {
              const newPage = await notion.pages.create({
                parent: { page_id: process.env.PARENT_PAGE_ID },
                properties: {
                  title: {
                    title: [{ text: { content: "Archive" } }]
                  }
                }
              });
              console.log(newPage.id);
            })();
EOF
            )
          else
            PAGE_ID=$EXISTING_PAGE_ID
          fi
          echo "ARCHIVE_PAGE_ID=$PAGE_ID" >> $GITHUB_ENV
          echo "archive_page_id=$PAGE_ID" >> $GITHUB_OUTPUT
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          PARENT_PAGE_ID: ${{ secrets.PARENT_PAGE_ID }}

      - name: Sync Archive folder to Notion
        run: |
          npx @vrerv/md-to-notion \
            --token "$NOTION_TOKEN" \
            --page-id "$ARCHIVE_PAGE_ID" \
            --delete \
            --verbose \
            "Archive"
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          ARCHIVE_PAGE_ID: ${{ steps.create_archive_page.outputs.archive_page_id }}
