name: Sync Obsidian → Notion (hierarchy)

on:
  push:
    paths:
      - "Flow/**/*.md"
      - "Stock/**/*.md"
      - "Archive/**/*.md"
  workflow_dispatch:

jobs:
  sync-to-notion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install @notionhq/client @vrerv/md-to-notion

      # Flow フォルダ用ページの取得または作成
      - name: Create or get Flow page
        id: flow_page
        run: |
          EXISTING=$(node -e "const {Client}=require('@notionhq/client');(async()=>{const notion=new Client({auth:process.env.NOTION_TOKEN});const children=(await notion.blocks.children.list({block_id:process.env.PARENT_PAGE_ID,page_size:100})).results;const p=children.find(b=>b.type==='child_page'&&b.child_page.title==='Flow');console.log(p?.child_page.id||'');})();")
          if [ -z "$EXISTING" ]; then
            ID=$(node -e "const {Client}=require('@notionhq/client');(async()=>{const notion=new Client({auth:process.env.NOTION_TOKEN});const page=await notion.pages.create({parent:{page_id:process.env.PARENT_PAGE_ID},properties:{title:{title:[{text:{content:'Flow'}}]}}});console.log(page.id);})();")
          else
            ID=$EXISTING
          fi
          echo "FLOW_PAGE_ID=$ID" >> $GITHUB_ENV
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          PARENT_PAGE_ID: ${{ secrets.PARENT_PAGE_ID }}

      - name: Sync Flow folder to Notion
        run: npx @vrerv/md-to-notion --token "$NOTION_TOKEN" --page-id "$FLOW_PAGE_ID" --delete --verbose "Flow"
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          FLOW_PAGE_ID: ${{ env.FLOW_PAGE_ID }}

      # Stock フォルダ用ページの取得または作成
      - name: Create or get Stock page
        id: stock_page
        run: |
          EXISTING=$(node -e "const {Client}=require('@notionhq/client');(async()=>{const notion=new Client({auth:process.env.NOTION_TOKEN});const children=(await notion.blocks.children.list({block_id:process.env.PARENT_PAGE_ID,page_size:100})).results;const p=children.find(b=>b.type==='child_page'&&b.child_page.title==='Stock');console.log(p?.child_page.id||'');})();")
          if [ -z "$EXISTING" ]; then
            ID=$(node -e "const {Client}=require('@notionhq/client');(async()=>{const notion=new Client({auth:process.env.NOTION_TOKEN});const page=await notion.pages.create({parent:{page_id:process.env.PARENT_PAGE_ID},properties:{title:{title:[{text:{content:'Stock'}}]}}});console.log(page.id);})();")
          else
            ID=$EXISTING
          fi
          echo "STOCK_PAGE_ID=$ID" >> $GITHUB_ENV
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          PARENT_PAGE_ID: ${{ secrets.PARENT_PAGE_ID }}

      - name: Sync Stock folder to Notion
        run: npx @vrerv/md-to-notion --token "$NOTION_TOKEN" --page-id "$STOCK_PAGE_ID" --delete --verbose "Stock"
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          STOCK_PAGE_ID: ${{ env.STOCK_PAGE_ID }}

      # Archive フォルダ用ページの取得または作成
      - name: Create or get Archive page
        id: archive_page
        run: |
          EXISTING=$(node -e "const {Client}=require('@notionhq/client');(async()=>{const notion=new Client({auth:process.env.NOTION_TOKEN});const children=(await notion.blocks.children.list({block_id:process.env.PARENT_PAGE_ID,page_size:100})).results;const p=children.find(b=>b.type==='child_page'&&b.child_page.title==='Archive');console.log(p?.child_page.id||'');})();")
          if [ -z "$EXISTING" ]; then
            ID=$(node -e "const {Client}=require('@notionhq/client');(async()=>{const notion=new Client({auth:process.env.NOTION_TOKEN});const page=await notion.pages.create({parent:{page_id:process.env.PARENT_PAGE_ID},properties:{title:{title:[{text:{content:'Archive'}}]}}});console.log(page.id);})();")
          else
            ID=$EXISTING
          fi
          echo "ARCHIVE_PAGE_ID=$ID" >> $GITHUB_ENV
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          PARENT_PAGE_ID: ${{ secrets.PARENT_PAGE_ID }}

      - name: Sync Archive folder to Notion
        run: npx @vrerv/md-to-notion --token "$NOTION_TOKEN" --page-id "$ARCHIVE_PAGE_ID" --delete --verbose "Archive"
        env:
          NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
          ARCHIVE_PAGE_ID: ${{ env.ARCHIVE_PAGE_ID }}
